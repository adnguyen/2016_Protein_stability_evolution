prop<-fud(T=seq(25,70,1),Tm=45,slope=.2,min=.4)
T<-seq(25,70,1)
com<-cbind(T,prop);head(com)
plot(T,sa,ylab="Poportion non-denatured",xlab="Temperature (C)",las=1)
plot(T,com,ylab="Poportion non-denatured",xlab="Temperature (C)",las=1)
plot(T,prop,ylab="Poportion non-denatured",xlab="Temperature (C)",las=1)
n<-as.data.frame(com[sample(com,size=20),])# randomly sampling
com<-cbind(T,prop);head(com)
com
n<-as.data.frame(com[sample(com,size=20),])# randomly sampling
sample(com,size=20)
com[sample(com,size=20),]
n<-as.data.frame(com[sample(com,size=20)])# randomly sampling
n
n<-as.data.frame(com[sample(com,size=20),])# randomly sampling
n<-as.data.frame(com[sample(com,size=10),])# randomly sampling
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n
n$prop<-n[,2]+rnorm(mean=0,sd=0.02086242,n=10)# adding error
plot(n$T,n$prop)
nls.fit(n)
unfolding<-fud(T=seq(25,70,1),Tm=45,slope=.2,min=.4)
T<-seq(25,70,1)
com<-cbind(T,unfolding);head(com)
plot(T,prop,ylab="Poportion non-denatured",xlab="Temperature (C)",las=1)
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n$prop<-n[,2]+rnorm(mean=0,sd=0.02086242,n=10)# adding error
plot(n$T,n$prop)
nls.fit(n)
plot(n$T,n$prop,pch=16,col="black")
plot(n$T,n$prop,pch=16,col="black",cex=2)
lines(T,prop)
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n$prop<-n[,2]+rnorm(mean=0,sd=0.02086242,n=10)# adding error
plot(n$T,n$prop,pch=16,col="black",cex=2)
lines(T,prop)
nls.fit(n)
plot(n$T,n$prop,pch=16,col="black",cex=2)
lines(T,prop)
nls.fit(n)
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n$prop<-n[,2]+rnorm(mean=0,sd=0.02086242,n=10)# adding error
plot(n$T,n$prop,pch=16,col="black",cex=2)
lines(T,prop)
nls.fit(n)
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n$prop<-n[,2]+rnorm(mean=0,sd=0.02086242,n=10)# adding error
plot(n$T,n$prop,pch=16,col="black",cex=2)
lines(T,prop)
nls.fit(n)
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n$prop<-n[,2]+rnorm(mean=0,sd=0.02086242,n=10)# adding error
plot(n$T,n$prop,pch=16,col="black",cex=2)
lines(T,prop)
nls.fit(n)
plot(n$T,n$prop,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,prop)
nls.fit(n)
plot(n$T,n$prop,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,prop)
nls.fit(n)
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n$prop<-n[,2]+rnorm(mean=0,sd=0.2,n=10)# adding error
plot(n$T,n$prop,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,prop)
nls.fit(n)
n
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$prop,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,prop)
nls.fit(n)
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$prop,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
nls.fit(n)
unfolding<-fud(T=seq(25,70,1),Tm=45,slope=.2,min=.4)
lines(T,unfolding)
T
unfolding
unfolding<-fud(T=seq(25,70,1),Tm=45,slope=.2,min=.4)
unfolding
T
plot(n$T,n$prop,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
nls.fit(n)
T
n$T
plot(n$T,n$prop,pch=16,col="black",cex=2,ylim=c(.4,1))
str(n)
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
nls.fit(n)
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
nls.fit(n)
knitr::kable(nls.fit(n))
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
tt<-nls.fit(n)
knitr::kable(nls.fit(tt))
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
tt<-nls.fit(n)
knitr::kable(tt)
library(spatstat)
tt
nndist(n$T)
mean(nndist(n$T))
sd(nndist(n$T))
mean(nndist(n$T))
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
tt<-nls.fit(n)
knitr::kable(tt)
mean(nndist(n$T))
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
tt<-nls.fit(n)
knitr::kable(tt)
mean(nndist(n$T))
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
tt<-nls.fit(n)
knitr::kable(tt)
mean(nndist(n$T))
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
tt<-nls.fit(n)
knitr::kable(tt)
mean(nndist(n$T))
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
tt<-nls.fit(n)
knitr::kable(tt)
mean(nndist(n$T))
nndist(n$T,k=1:3)
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
tt<-nls.fit(n)
knitr::kable(tt)
mean(nndist(n$T,k=1:3))
nndist(n$T,k=1:3)
lines(n$T,n$unfolding)
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
lines(n$T,n$unfolding)
n
sort(n)
sort(n$T)
n<-n[sort(n$T),]
n
sort(n$T)
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
sort(n$T)
n<-n[sort(n$T),]
n
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n[sort(n$T),]
[,sort(n$T)]
n[,sort(n$T)]
n[order(n$T),]
n<-n[order(n$T),]
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
lines(n$T,n$unfolding)
tt<-nls.fit(n)
knitr::kable(tt)
tt[2]
tt
lines(seq(25,70,.1),fud(Tm=tt[2],slope=tt[1],min=tt[3],T=seq(25,70,.1)))
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
tt<-nls.fit(n)
lines(seq(25,70,.1),fud(Tm=tt[2],slope=tt[1],min=tt[3],T=seq(25,70,.1)),col="red")
knitr::kable(tt)
mean(nndist(n$T))
lines(seq(25,70,.1),fud(Tm=tt[2],slope=tt[1],min=tt[3],T=seq(25,70,.1)),col="red",lwd=2)
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
tt<-nls.fit(n)
lines(seq(25,70,.1),fud(Tm=tt[2],slope=tt[1],min=tt[3],T=seq(25,70,.1)),col="red",lwd=2)
knitr::kable(tt)
legend(50,1,c("Known curve","Modeled curve based on points",col=c("black","red")))
lines(seq(25,70,.1),fud(Tm=tt[2],slope=tt[1],min=tt[3],T=seq(25,70,.1)),col="red",lwd=2)
legend(50,1,c("Known curve","Modeled curve based on points",col=c("black","red"),pch="-"))
knitr::kable(tt)
legend(50,1,c("Known curve","Modeled curve based on points",col=c("black","red"),pch=c("-")))
legend(50,1,c("Known curve","Modeled curve based on points",col=c("black","red"),pch=c(16,16)))
legend(50,1,c("Known curve","Modeled curve based on points",col=c("black","red"),pch=16))
legend(50,1,c("10 minute","20 minute"),pch=16,col=c("black","red"))
legend(50,1,c("Known curve","Modeled based on points"),pch=16,col=c("black","red"))
legend(50,1,c("Known curve","Modeled based on points"),pch="-",col=c("black","red"))
legend(50,1,c("Known curve","Modeled based on points"),pch="-",col=c("black","red"),cex=2)
legend(45,1,c("Known curve","Modeled based on points"),pch="-",col=c("black","red"),cex=2)
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n<-n[order(n$T),]
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
tt<-nls.fit(n)
lines(seq(25,70,.1),fud(Tm=tt[2],slope=tt[1],min=tt[3],T=seq(25,70,.1)),col="red",lwd=2)
legend(45,1,c("Known curve","Modeled based on points"),pch="-",col=c("black","red"),cex=2)
knitr::kable(tt)
#mean(nndist(n$T))
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n<-n[order(n$T),]
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
tt<-nls.fit(n)
lines(seq(25,70,.1),fud(Tm=tt[2],slope=tt[1],min=tt[3],T=seq(25,70,.1)),col="red",lwd=2)
legend(45,1,c("Known curve","Modeled based on points"),pch="-",col=c("black","red"),cex=1.5)
knitr::kable(tt)
#mean(nndist(n$T))
#try nearest neighbor
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n<-n[order(n$T),]
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
tt<-nls.fit(n)
lines(seq(25,70,.1),fud(Tm=tt[2],slope=tt[1],min=tt[3],T=seq(25,70,.1)),col="red",lwd=2)
legend(45,1,c("Known curve","Modeled based on points"),pch="-",col=c("black","red"),cex=1.5)
knitr::kable(tt)
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n<-n[order(n$T),]
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
tt<-nls.fit(n)
lines(seq(25,70,.1),fud(Tm=tt[2],slope=tt[1],min=tt[3],T=seq(25,70,.1)),col="red",lwd=2)
legend(45,1,c("Known curve","Modeled based on points"),pch="-",col=c("black","red"),cex=1.5)
knitr::kable(tt)
?legend
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n<-n[order(n$T),]
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
tt<-nls.fit(n)
lines(seq(25,70,.1),fud(Tm=tt[2],slope=tt[1],min=tt[3],T=seq(25,70,.1)),col="red",lwd=2)
legend(45,1,c("Known curve","Modeled based on points"),pch="-",col=c("black","red"),cex=1.5)
knitr::kable(tt)
library(ggplot2)
library(tidyr)
library(minpack.lm)
unfolding<-fud(T=seq(25,70,1),Tm=45,slope=.2,min=.4)
T<-seq(25,70,1)
com<-cbind(T,unfolding);head(com)
plot(T,unfolding,ylab="Poportion non-denatured",xlab="Temperature (C)",las=1)
#sample random points
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n<-n[order(n$T),]
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
tt<-nls.fit(n)
lines(seq(25,70,.1),fud(Tm=tt[2],slope=tt[1],min=tt[3],T=seq(25,70,.1)),col="red",lwd=2)
legend(45,1,c("Known curve","Modeled based on points"),pch="-",col=c("black","red"),cex=1.5)
knitr::kable(tt)
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n<-n[order(n$T),]
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
tt<-nls.fit(n)
lines(seq(25,70,.1),fud(Tm=tt[2],slope=tt[1],min=tt[3],T=seq(25,70,.1)),col="red",lwd=2)
legend(45,1,c("Known curve","Modeled based on points"),pch="-",col=c("black","red"),cex=1.5)
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n<-n[order(n$T),]
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
tt<-nls.fit(n)
lines(seq(25,70,.1),fud(Tm=tt[2],slope=tt[1],min=tt[3],T=seq(25,70,.1)),col="red",lwd=2)
legend(45,1,c("Known curve","Modeled based on points"),pch="-",col=c("black","red"),cex=1.5)
knitr::kable(tt)
tt
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n<-n[order(n$T),]
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
tt<-nls.fit(n)
tt
lines(seq(25,70,.1),fud(Tm=tt[2],slope=tt[1],min=tt[3],T=seq(25,70,.1)),col="red",lwd=2)
legend(45,1,c("Known curve","Modeled based on points"),pch="-",col=c("black","red"),cex=1.5)
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n<-n[order(n$T),]
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
tt<-nls.fit(n)
tt
lines(seq(25,70,.1),fud(Tm=tt[2],slope=tt[1],min=tt[3],T=seq(25,70,.1)),col="red",lwd=2)
legend(45,1,c("Known curve","Modeled based on points"),pch="-",col=c("black","red"),cex=1.5)
knitr::kable(tt)
n<-n[order(n$T),]
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
tt<-nls.fit(n)
tt
lines(seq(25,70,.1),fud(Tm=tt[2],slope=tt[1],min=tt[3],T=seq(25,70,.1)),col="red",lwd=2)
legend(45,1,c("Known curve","Modeled based on points"),pch="-",col=c("black","red"),cex=1.5)
knitr::kable(tt)
n<-n[order(n$T),]
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
n<-n[order(n$T),]
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
n<-n[order(n$T),]
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
n<-n[order(n$T),]
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
tt<-nls.fit(n)
tt
n<-n[order(n$T),]
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
n<-n[order(n$T),]
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n<-n[order(n$T),]
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
tt<-nls.fit(n)
tt
n<-n[order(n$T),]
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n<-n[order(n$T),]
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
tt<-nls.fit(n)
tt
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n<-n[order(n$T),]
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
tt<-nls.fit(n)
tt
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n<-n[order(n$T),]
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
tt<-nls.fit(n)
tt
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n<-n[order(n$T),]
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
tt<-nls.fit(n)
tt
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n<-n[order(n$T),]
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
tt<-nls.fit(n)
tt
lines(seq(25,70,.1),fud(Tm=tt[2],slope=tt[1],min=tt[3],T=seq(25,70,.1)),col="red",lwd=2)
legend(45,1,c("Known curve","Modeled based on points"),pch="-",col=c("black","red"),cex=1.5)
n<-as.data.frame(com[sample(nrow(com), 10), ])# randomly sampling
n<-n[order(n$T),]
n$unfolding<-n[,2]+rnorm(mean=0,sd=0.02,n=10)# adding error
plot(n$T,n$unfolding,pch=16,col="black",cex=2,ylim=c(.4,1))
lines(T,unfolding)
tt<-nls.fit(n)
tt
lines(seq(25,70,.1),fud(Tm=tt[2],slope=tt[1],min=tt[3],T=seq(25,70,.1)),col="red",lwd=2)
legend(45,1,c("Known curve","Modeled based on points"),pch="-",col=c("black","red"),cex=1.5)
knitr::kable(tt)
library(ggplot2)
library(tidyr)
library(minpack.lm)
nls.fit<-function(data=data){
y<-nlsLM(unfolding ~ min+ (1-min)/(1+exp((-slope*(Tm-T)))),data=data,
start=list(slope=.5,Tm=45,min=.3),
trace=TRUE,control=nls.control(warnOnly = TRUE, tol = 1e-05, maxiter=1000))
#return(y)
return(summary(y)$coefficients)
}
x<-read.csv("../Data/20160520_total_protein_unfolding.csv")
x<-read.csv("../Data/20160520_total_protein_unfolding.csv")
x.par<-subset(x,x$TN=="N" & x$Species!="A. picea")
summary(x.par)
str(x.par)
x.par
names(x.par)
nls.fit<-function(data=data){
y<-nlsLM(unfolding ~ min+ (1-min)/(1+exp((-slope*(Tm-T)))),data=data,
start=list(slope=.5,Tm=45,min=.3),
trace=TRUE,control=nls.control(warnOnly = TRUE, tol = 1e-05, maxiter=1000))
#return(y)
return(summary(y)$coefficients)
}
sapply(split(x.par,list(x.par$Species,x.par$Colony)),nls.fit)
sapply(split(x.par,list(x.par$Species,x.par$Colony)),function(x){nls.fit(x)})
split(x.par,list(x.par$Species,x.par$Colony)
)
ddply(x.par,.(Species,Colony),nls.fit)
library(plyr)
ddply(x.par,.(Species,Colony),nls.fit)
mod1<-ddply(x.par,.(Species,Colony),nls.fit)
mod1
class(mod1)
mod1$parameter<-rep(c("slope","Tm","min"),length(mod$1Species)/3)
length(mod$1Species)/3
mod$1Species
mod1$parameter<-rep(c("slope","Tm","min"),length(mod1$Species)/3)
knitr::kable(mod1)
Tm<-subset(mod1,mod1$parameter=="Tm")
Tm
summary(aov(parameter~Species,data=Tm))
summary(aov(Estimate~Species,data=Tm))
slope<-subset(mod1,mod1$parameter=="slope")
slope
summary(aov(Estimate~Species,data=slope))
boxplot(Estimate~Species,data=slope)
boxplot(Estimate~Species,data=slope,las=1)
boxplot(Estimate~Species,data=slope,las=1,ylab="slope parameter")
summary(aov(Estimate~Species,data=min))
min<-subset(mod1,mod1$parameter=="min")
min
summary(aov(Estimate~Species,data=min))
knitr::kable(summary(aov(Estimate~Species,data=slope)))
names(x.par)
ggplot(x.par,aes(x=T,y=unfolding))+geom_points()
ggplot(x.par,aes(x=T,y=unfolding))+geom_point()
ggplot(x.par,aes(x=T,y=unfolding,colour=Colony)+geom_point()
)
ggplot(x.par,aes(x=T,y=unfolding,colour=Colony))+geom_point()
ggplot(x.par,aes(x=T,y=unfolding,colour=Species))+geom_point()
ggplot(x.par,aes(x=T,y=unfolding,colour=Species))+geom_point()+geom_line()
ggplot(x.par,aes(x=T,y=unfolding,colour=Species))+geom_point()
boxplot(Estimate~Species,data=slope,las=1,ylab="slope parameter")
summary(aov(Estimate~Species,data=slope))
fud<-function(T=seq(25,50,1),Tm=40,slope=.5,max=1,min=0){
y<-min+ (max-min)/(1+exp((-slope*(Tm-T))))
return(y)
}
plot(fud)
plot(fud())
plot(fud(slope=.15))
points(fud(,slope=.2))
plot(fud(slope=.15))# aphaeno
points(fud(,slope=.2))#pogo
fud<-function(T=seq(25,70,1),Tm=40,slope=.5,max=1,min=0){
y<-min+ (max-min)/(1+exp((-slope*(Tm-T))))
return(y)
}
plot(seq(25,70,1),fud(slope=.15))# aphaeno
plot(seq(25,70,1),fud(slope=.15),col="blue",pch=16)# aphaeno
points(seq(25,70,1),fud(,slope=.2))#pogo
points(seq(25,70,1),fud(,slope=.2),col="red",pch=15)#pogo
plot(seq(25,70,1),fud(slope=.15),col="blue",pch=16,las=1,ylim=c(0,1))# aphaeno
points(seq(25,70,1),fud(,slope=.2),col="red",pch=15)#pogo
legend(1,50,c("pogo","rudis"),pch=c(15,16),col=c("red","blue"))
legend(50,1,c("pogo","rudis"),pch=c(15,16),col=c("red","blue"))
plot(seq(25,70,1),fud(slope=.15),col="blue",pch=16,las=1,ylim=c(0,1),ylab="Proportion non-denatured")# aphaeno
points(seq(25,70,1),fud(,slope=.2),col="red",pch=15)#pogo
legend(50,1,c("pogo","rudis"),pch=c(15,16),col=c("red","blue"))
plot(seq(25,70,1),fud(slope=.15),col="blue",pch=16,las=1,ylim=c(0,1),ylab="Proportion non-denatured",xlab="Temperature")# aphaeno
points(seq(25,70,1),fud(,slope=.2),col="red",pch=15)#pogo
legend(50,1,c("pogo","rudis"),pch=c(15,16),col=c("red","blue"))
x<-read.csv("../Data/20160520_total_protein_unfolding.csv")
x.par<-subset(x,x$TN=="N" & x$Species!="A. picea")
str(x.par)
x.par
mod1<-ddply(x.par,.(Species,Colony),nls.fit)
mod1$parameter<-rep(c("slope","Tm","min"),length(mod1$Species)/3)
knitr::kable(mod1)
Tm<-subset(mod1,mod1$parameter=="Tm")
Tm
summary(aov(Estimate~Species,data=Tm))
slope<-subset(mod1,mod1$parameter=="slope")
slope
summary(aov(Estimate~Species,data=slope))
boxplot(Estimate~Species,data=slope,las=1,ylab="slope parameter")
min<-subset(mod1,mod1$parameter=="min")
min
summary(aov(Estimate~Species,data=min))
ggplot(x.par,aes(x=T,y=unfolding,colour=Species))+geom_point()
