{
    "contents" : "---\ntitle: \"20160317_mass_spec_unfolding_analysis\"\nauthor: \"Andrew Nguyen\"\ndate: \"2016-March-17\"\noutput: pdf_document\n---\n\n#load library\n```{r libraries}\nlibrary(ggplot2)\nlibrary(tidyr)\nlibrary(stringr)\nlibrary(minpack.lm)\nlibrary(plyr)\n#functions\n\n#fitting logistic curve \n#iwll help to plot if you just put parameters in\nfud<-function(T=seq(25,50,1),Tm=40,slope=.5,max=1,min=0){\n  y<-min+ (max-min)/(1+exp((-slope*(Tm-T))))\n  return(y)\n  }\nplot(seq(25,50,1),fud(max=1,min=0),pch=15,col=\"black\")\n#nls function estimate the minimum unfolding\n\n\n\n#nls fit\nnls.fit<-function(data=data){\n  y<-nlsLM(unfolding ~ min+ (1-min)/(1+exp((-slope*(Tm-T)))),data=data, start=list(slope=.5,Tm=45,min=.3), trace=TRUE,control=nls.control(warnOnly = TRUE, tol = 1e-05, maxiter=1000))\n  #return(coef(y))\n  return(summary(y)$parameters)\n  }\n\n```\n\n#How should we be sampling non-linear curves?\n```{r nonlinear curves}\n\n```\n\n\n#Look at GO terms\n```{r GO terms}\ngi_go<-read.table(\"../Data/2016/03_March/20160317_NCBI_Mass_spec_pb1710_search/gene2go\")\n```\n\n\n#test unfolding curves\n```{r}\nt<-read.csv(\"../Data/test.csv\")\nstr(t)\n\nddply(t,.(Colony),summarize,nls.fit())\n\nm<-subset(t,t$Colony==\"Avon\")\nnls.fit(m)\n\nwwr<-subset(t,t$Colony==\"WWRQ45\")\nnls.fit(wwr)\n\npb<-subset(t,t$Colony==\"Pb17-10\")\nnls.fit(pb)\n\nb<-subset(t,t$Colony==\"Bingham\")\nnls.fit(b)\n\nbuddy<-t(c(nls.fit(m),nls.fit(b),nls.fit(wwr),nls.fit(pb)))\nbuddy2<-data.frame(t(rbind(buddy,c(rep(\"Avon\",3),rep(\"Bing\",3),rep(\"WWR\",3),rep(\"PB\",3)),rep(c(\"slope\",\"Tm\",\"min\"),4))))\n\nbuddy2\nnames(buddy2)<-c(\"measure\",\"Colony\",\"parameter\")\nbuddy2$measure<-as.numeric(as.character(buddy2$measure))\nbuddy2\n#write.csv(buddy2,\"prelim_param.csv\")\nsl<-subset(buddy2,buddy2$parameter==\"slope\")\nbarplot(sl$measure,names.arg=sl$Colony,ylab=\"slopes\")\n\nTm<-subset(buddy2,buddy2$parameter==\"Tm\")\n#barplot(Tm$measure,names.arg=Tm$Colony,ylab=\"Tm\",ylim=c(4))\n\nbuddy2.sorted<-buddy2[sort(buddy2$parameter),]\nknitr::kable(buddy2.sorted)\n\n\n```\n\n\n#load in data and visualize\n```{r load and visualize}\np<-read.csv(\"../Data/20160317_parsed_pb17-10_unfolding_mass_spec_NCBI_search_dat.csv\")\nstr(p)\n\n#getting rid of 25\np1<-p[,-5]\nstr(p1)\n\n#temp points\nTemp<-c(15,20,30,35,40,45,50,55,60)\n#make a few plots\nplot(Temp,p1[1,3:11],pch=16,cex=3,main=\"Unknown protein\",ylab=\"Fraction non-denatured\") # first row\n\nplot(Temp,p1[38,3:11],pch=16,cex=3)#row 38\n#info for row 38\np1[38,1:2]\ntest<-as.data.frame(t(rbind(Temp,p1[38,3:11])))\n#test<-as.data.frame(t(rbind(Temp,p1[129,3:11]))) # no singular gradient\nnames(test)<-c(\"T\",\"unfolding\")\n\nfit1<-nls(unfolding ~ min+ (1-min)/(1+exp((-slope*(Tm-T)))),data=test, start=list(slope=.3,Tm=40,min=.2), trace=TRUE,control=nls.control(warnOnly = TRUE, tol = 1e-05, maxiter=1000))\nsummary(fit1)\nplot(Temp,p1[38,3:11],pch=16,cex=3,ylim=c(0,1.3),main=\"ATP synthase subunit f, mitochondrial\",ylab=\"Fraction non-denatured\")\nlines(seq(15,60,.1),fud(T=seq(15,60,.1),Tm=36.0947,slope=0.84522,min=0.31959),lwd=2,col=\"blue\",lty=\"dotdash\")\n\n#tyring nlsLM\n\n#no fit\ntest_fail<-as.data.frame(t(rbind(Temp,p1[1,3:11])))\n#test_fail<-as.data.frame(t(rbind(Temp,p1[138,3:11])))\nnames(test_fail)<-c(\"T\",\"unfolding\")\n#plot(Temp,p1[138,3:11],pch=16,cex=3)\nplot(Temp,p1[1,3:11],pch=16,cex=3)\n\nfit_fail<-nlsLM(unfolding ~ min+ (1-min)/(1+exp((-slope*(Tm-T)))),data=test_fail, start=list(slope=.3,Tm=35,min=.2), trace=TRUE,control=nls.control(warnOnly = TRUE, tol = 1e-05, maxiter=1000))\nsummary(fit_fail)\n\n#should work\nfit2<-nlsLM(unfolding ~ min+ (1-min)/(1+exp((-slope*(Tm-T)))),data=test, start=list(slope=.3,Tm=35,min=.2), trace=TRUE,control=nls.control(warnOnly = TRUE, tol = 1e-05, maxiter=1000))\nsummary(fit2)\n\n# to see if the function worked\nsummary(fit_fail)$convInfo$stopMessage\nsummary(fit2)$convInfo$stopMessage\n```\n\n#new fits with failwith\n* fits<-ddply(mlong,.(Colony,gene),failwith(f=Boltz))\n```{r}\ndata_long <- gather(p1, T, unfolding, X15:X60)\ndlong<-data_long[order(data_long$Accession),]\nhead(dlong)\n\ntemp<-as.data.frame(matrix(unlist(str_split(dlong$T,\"X\",n=3)),ncol=2,byrow=TRUE))\n\ndlong$T<-as.numeric(as.character(temp$V2))\nnames(dlong)\n\nfits<-ddply(dlong,.(Description),failwith(f=nls.fit))\nparams<-rep(c(\"slope\",\"Tm\",\"min\"),length(fits$Description)/3)\nfits$params<-params\nhead(fits)\n\nTm<-subset(fits,fits$params==\"Tm\" & fits$Estimate <60)\nhist(Tm$Estimate,xlim=c(25,60),10)\nhiTm<-subset(fits,fits$params==\"Tm\" & fits$Estimate > 40)\n\nhiTm$Description\n\n```\n\n\n\n#looking for high tm proteins\n```{r looking for high tm proteins}\ntest<-as.data.frame(t(rbind(Temp,p1[100,3:11])))\n#test<-as.data.frame(t(rbind(Temp,p1[129,3:11]))) # no singular gradient\nnames(test)<-c(\"T\",\"unfolding\")\n\nfitted<-nlsLM(unfolding ~ min+ (1-min)/(1+exp((-slope*(Tm-T)))),data=test, start=list(slope=.3,Tm=35,min=.2), trace=TRUE,control=nls.control(warnOnly = TRUE, tol = 1e-05, maxiter=1000))\nsummary(fitted)$parameters\n```\n\n#testing out data parsing\n```{r testing out data parsing}\n#making a dataset with aa gene that cant be fitted and one that can be\ntest$Gene<-rep(\"Gene1\",length(test$T))\ntest_fail$Gene<-rep(\"Gene2\",length(test_fail$T))\nnew_test_dat<-as.data.frame(rbind(test,test_fail))\n\n##apply the function\nplay_func<-sapply(split(new_test_dat,list(new_test_dat$Gene)),function(x){ifelse(summary(nlsLM(unfolding ~ min+ (1-min)/(1+exp((-slope*(Tm-T)))),data=x, start=list(slope=.3,Tm=35,min=.2), trace=TRUE,control=nls.control(warnOnly = TRUE, tol = 1e-05, maxiter=1000)))$convInfo$stopMessage==\"Relative error in the sum of squares is at most `ftol'.\",\"worked\",\"no\")})\n\nplay_func\n```\n\n#lets do this for the real data set\nworkflow:\n1) figure out which ones I can fit curves to\n2) figure out how to grab their parameters (Tm, slope, min)\n3) Graph and Esimate thermodynamics\n\n#1)figure out which ones I can fit curves to\n##changing wide to long format\n```{r}\n#before changing to wide to long format\nhead(p1)\np2<-tail(p1,150);dim(p2)\n\np2.long<-gather(p2,Description,unfolding,X15:X60)\np2.long.sort<-p2.long[order(p2.long[,2]),-6]\n\n#adding temps\np2.long.sort$T<-rep(c(15,20,30,35,40,45,50,55,60),length(p2.long.sort$unfolding)/9)\nstr(p2.long.sort)\nhead(p2.long.sort,11)\n\np2.long.sort$Accession<-as.factor(p2.long.sort$Accession)\n```\n##fit models to all genes\n```{r fit models to all genes}\nlibrary(plyr)\n#cant fit to proteins that dont work, subset out the 60 degree temperature\nall.fit<-sapply(split(p2.long.sort,list(p2.long.sort$Accession)),function(x){ifelse(summary(nlsLM(unfolding ~ min+ (1-min)/(1+exp((-slope*(Tm-T)))),data=x, start=list(slope=.5,Tm=37,min=.3), trace=TRUE,control=nls.control(warnOnly = TRUE, tol = 1e-05, maxiter=1000)))$convInfo$stopMessage==\"Relative error in the sum of squares is at most `ftol'.\",\"worked\",\"no\")})\n\nall.fit\n\n#param.fit\nparam.fit<-sapply(split(p2.long.sort,list(p2.long.sort$Accession)),function(x){summary(nlsLM(unfolding ~ min+ (1-min)/(1+exp((-slope*(Tm-T)))),data=x, start=list(slope=.5,Tm=37,min=.3), trace=TRUE,control=nls.control(warnOnly = TRUE, tol = 1e-05, maxiter=1000)))$parameters[,1]})\nhead(param.fit)\nt(param.fit)\nparameterss<-as.data.frame(cbind(t(param.fit),row.names(t(param.fit))))\nparameterss\nparameterss$slope<-as.numeric(as.character(parameterss$slope))\nparameterss$Tm<-as.numeric(as.character(parameterss$Tm))\nparameterss$min<-as.numeric(as.character(parameterss$min))\n\nstr(parameterss);dim(parameterss)\nsub.param<-subset(parameterss,parameterss$Tm < 40 )\nstr(sub.param);dim(sub.param)\n\nhist(sub.param$Tm)\nhist(sub.param$slope)\nhist(sub.param$min)\n\ncor_param<-princomp(sub.param[,1:3],scale=T)\ncor_param\ncor_param$loadings[,1:3]\n\n#write.csv(t(param.fit),\"param_fits.csv\")\n#param.p.values\nparam.p<-sapply(split(p2.long.sort,list(p2.long.sort$Accession)),function(x){summary(nlsLM(unfolding ~ min+ (1-min)/(1+exp((-slope*(Tm-T)))),data=x, start=list(slope=.5,Tm=37,min=.3), trace=TRUE,control=nls.control(warnOnly = TRUE, tol = 1e-05, maxiter=1000)))$parameters[,4]})\nhead(param.p)\nparam_p<-as.data.frame(cbind(t(param.p),row.names(t(param.p))))\n#write.csv(t(param.p),\"param_p_values.csv\")\n```\n\n#figures predictions of models\n```{r predicting new values from model and plotting}\nstr(sub.param)\nnames(sub.param)[4]<-\"Accession\"\n#ddply(sub.param,.(Accession),summarize,function(x) fud(T=seq(15,60,.1),Tm=x$Tm,slope=x$slope,min=x$min))\nlist_predictions<-sapply(split(sub.param,list(sub.param$Accession)),function(x) {fud(T=seq(15,60,.1),Tm=x$Tm,slope=x$slope,min=x$min)})\n\npredi<-as.data.frame(do.call(\"rbind\", list_predictions),stringAsFactors=FALSE)\npredi$Accession<-sub.param$Accession\nstr(predi)\n\npredi.long<-gather(predi,Accession,unfolding,V1:V451)\nnames(predi.long)[2]<-\"Temp\"\npredi.long$Temp<-as.character(predi.long$Temp)\nstr(predi.long)\n#library(stringer)\ntmp<-unlist(strsplit(predi.long$Temp,split=\"V\"))\nlength(na.omit(as.numeric(tmp)))\ndim(predi.long)\n\npredi.long$Tfac<-na.omit(as.numeric(tmp))\npredi.long.sorted<-predi.long[order(predi.long$Accession),]\nhead(predi.long.sorted)\n\nddply(predi.long.sorted,.(Accession),summarize,k=length(Tfac))\n\n\npredi.long.sorted$T<-rep(seq(15,60,.1),139)\n\n#now i can plot the predicted values\n\nggplot(data=predi.long.sorted,aes(x=T,y=unfolding,colour=Accession))+geom_line()\n\n```\n\n\n#estimating the gibbs free energy\n```{r estimating the gibbs free energy}\np1$Accession<-as.factor(p1$Accession)\nstr(p1)\nnames(sub.param)[4]<-\"Accession\"\ndim(sub.param)\nlibrary(dplyr)\nKinetics_estimates<-inner_join(sub.param,p1,by=c(\"Accession\"))\ndim(Kinetics_estimates)\n\nDeltaG_3<-function(Cp=5,T=(seq(-60,60,.1)+273.15),Tm=35+273.15,slope=.3){\n  G<-(slope*Tm)*(1-(T/Tm))-(Cp*((Tm-T)+T*log(T/Tm)))\n  m<-cbind(seq(-60,60,.1),G)\n\n  return(max(m[,2]))\n\n  }\n#cbind(seq(-60,60,.1),DeltaG_3())\nmo<-lm(Tm~calc..pI,data=Kinetics_estimates)\nsummary(mo)\nplot(Kinetics_estimates$calc..pI,Kinetics_estimates$Tm)\nabline(summary(mo))\n#CP estimates\n((Kinetics_estimates$X..AAs*12)/1000)*(pi/180)\n\n#ddply(Kinetics_estimates,.(Accession),summarize,function(x) DeltaG_3(Cp=(x$X..AAs*12)/1000,slope=x$slope,Tm=Tm))\nGibbs<-sapply(split(Kinetics_estimates,list(Kinetics_estimates$Accession)),function(x){DeltaG_3(Cp=(x$X..AAs*12)/1000*(pi/180),slope=x$slope,Tm=x$Tm)})\nhist(Gibbs,20,xlab=\"Gibbs free of unfolding\")\nrange(Gibbs)\n#Cp=(x$X..AAs*12)/1000*(pi/180),\n```\n\n",
    "created" : 1465667039413.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "43|15|45|3|\n49|6|85|3|\n",
    "hash" : "965162653",
    "id" : "2197F28F",
    "lastKnownWriteTime" : 1465669023,
    "path" : "~/zScience/Side_projects/2016_Protein_stability_evolution/Script_analysis/20160317_unfolding_script_pb17-10.Rmd",
    "project_path" : "20160317_unfolding_script_pb17-10.Rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}